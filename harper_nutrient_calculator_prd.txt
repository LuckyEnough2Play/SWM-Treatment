Harper Report-Based Nutrient Loading Calculator
– Process Requirements Document
Project Overview
This document outlines the requirements for a standalone desktop application that computes stormwater
nutrient loadings (nitrogen and phosphorus) using formulas and data from the 2007 Harper Stormwater
Treatment Report. The Harper report’s analyses focus on nitrogen and phosphorus mass loadings as these
nutrients are the primary contributors to water quality impairment in Florida. One key objective of the
report is to ensure no net increase in pollutant loadings after development compared to pre-development
conditions. For context, the Harper (2007) methodology is recognized by Florida regulatory agencies as a
best-practice for estimating annual nutrient loads , forming the foundation of widely-used tools like the
BMPTrains model . Implementing this proven methodology ensures the calculator’s results are
consistent with accepted standards in stormwater management. The proposed software will enable
engineers and planners to easily calculate annual nitrogen (TN) and phosphorus (TP) loads for a given site
using Harper’s exact formulas, providing transparency through displayed calculations and citations. The
tool is intended for use entirely offline on a single user’s machine, with a user-friendly interface that mimics
a word processor (Microsoft Word style) for entering input data and viewing formatted results.
Target Users: The primary users are civil and environmental engineers, stormwater planners, and
regulatory reviewers who need to quickly estimate nutrient loadings for project sites and verify compliance
with criteria (e.g. 80%/95% removal targets or no net increase in loadings). The application will also be
useful for educational purposes, allowing users to see how changes in inputs (land use, runoff, etc.) affect
nitrogen/phosphorus loads in real time.
Goals and Objectives
Accurate Nutrient Load Calculations: Implement the exact formulas from the Harper (2007) report
to compute annual total nitrogen (TN) and total phosphorus (TP) mass loadings for stormwater
runoff with a high degree of accuracy. The calculator’s results must be consistent with the Harper
report’s data and examples, ensuring engineering credibility (i.e., it should produce the same results
reported by Harper and by the BMPTrains software for the same inputs).
User-Friendly Interface: Provide a familiar, intuitive user interface resembling a word processor
document. The top section will contain input fields (for site parameters and pollutant parameters),
and a live PDF-style preview of results will be shown below. Users should feel comfortable with the
interface without steep learning curves, leveraging common UI paradigms (menus, forms, and
document-style output).
Pre-Populated Defaults: Prefill all input fields with default values derived from the Harper report’s
typical data so that a user can immediately see a sample calculation. For example, default event
mean concentrations (EMCs) might use representative values such as ~2.07 mg/L for TN and ~0.327
mg/L for TP, reflecting average stormwater nutrient concentrations from Harper’s findings
(values which continue to be used in updated analyses like BMPTrains) . These defaults save time
and ensure calculations start from realistic baselines, though every default can be overridden by the
user.
Real-Time Calculation & Feedback: Perform all computations instantaneously as inputs are entered
or modified. The preview of results updates in real time with no extra “calculate” step, allowing users
to iteratively tweak inputs and immediately see the impact on nutrient load outputs. This dynamic
feedback is crucial for exploratory analysis and verification of design scenarios.
Transparency (Formulas & Citations): Display the formulas used and cite their source within the
results output. The generated report should show how each key result was calculated (e.g. showing
that annual load = concentration × runoff volume) with proper reference to the Harper report section
or table from which the formula or value was obtained. This transparency builds trust in the results
and provides an educational traceability to the established research.
PDF Reporting (Minimal Narrative): Enable users to export the results to a well-formatted PDF
document. The report will be concise and technical – optimized for engineering use with minimal
narrative text. It will focus on input parameters, calculated nutrient loads, relevant formulas, and
references, rather than lengthy explanations. The style should resemble an engineering calculation
sheet or technical memo, so that the output can be directly used in reports or permitting
documentation with little to no editing.
Offline, Standalone Operation: The application must run entirely offline as a desktop program. All
necessary data (default coefficients, formulas, etc.) will be embedded so that no internet connection
is required for any functionality. Users (often working in the field or in secure environments) can rely
on the tool on their local machine. The program will be self-contained and easily installable on a
single user’s computer, without requiring server components or cloud services.
Scope of the Product
In Scope:
Nutrient Loading Calculations: The tool will calculate annual mass loadings of total nitrogen and
total phosphorus from stormwater runoff using the empirical formulas, coefficients, and
methodologies documented in the Harper (2007) report. This approach is the computational basis of
Florida’s BMPTrains model , ensuring consistency with accepted practices. Calculations will be
based on event mean concentration (EMC) values and runoff volume relationships as described by
Harper. Both pre-development and post-development scenarios can be evaluated by adjusting input
parameters (e.g. land use, runoff characteristics), allowing the user to determine if a “no net
increase” condition is achieved between scenarios.
Default Data from Harper Report: Key input parameters (such as typical runoff depth, nutrient
concentrations for various land uses, etc.) will be sourced from the Harper report’s data sets (as well
as any updated values documented in BMPTrains manuals) . The application will include these as
starting defaults or selection options. For example, the mean nutrient concentrations for common
land use categories (residential, commercial, etc.) provided by Harper will be available for quick
selection. Meteorological zone data and runoff coefficients from the report will likewise be
incorporated for default runoff volume estimation.
User Input Flexibility: Users will be able to modify any input values to fit their specific project
conditions. This includes site-specific variables such as drainage area, impervious cover, rainfall
depth or region, runoff coefficients, and measured or assumed EMCs for TN and TP. The tool will not
be limited to preset scenarios – any reasonable numeric input can be entered, and the calculations
will adjust accordingly. For scenarios with heterogeneous land uses, the user can input multiple sub-areas
each with distinct parameters (land use category, area, EMC, etc.) if desired. The application
will combine these inputs by computing area-weighted runoff and flow-weighted concentrations to
produce overall site loadings, mirroring the multi-catchment analysis approach used in BMPTrains
.
Interactive UI with Live Preview: The application will feature a split-pane interface – inputs on the
top pane and a live-updating preview of the output report on the bottom pane. As the user enters or
changes values in the input fields, the bottom pane will immediately render the updated results in a
formatted, printable view. The preview will show calculated nutrient loadings, intermediate values as
needed, and the formulas used (with notations or footnotes citing Harper). This interactive feedback
loop is central to the user experience.
PDF Export of Results: Users can generate a PDF file of the results exactly as shown in the preview.
The PDF will mirror the on-screen output (WYSIWYG – “what you see is what you get”), including all
tables, formulas, and citations. This allows the results to be easily saved, printed, or inserted into
official reports. The export function will require no online services and will produce a professional-looking
document suitable for regulatory review or archival.
Out of Scope:
Other Pollutant Calculations: The focus is strictly on total nitrogen and total phosphorus load
calculations. Other stormwater constituents (e.g. TSS, BOD, heavy metals) are outside the scope of
this tool’s calculations. (The Harper report notes that controlling nutrients tends to control other
pollutants as well, so by concentrating on N and P, the most critical factors are covered.) Future
expansions could consider additional pollutants, but the initial version will not.
Advanced Treatment Design: The application will not perform detailed design of stormwater
treatment systems (e.g. sizing a retention pond) or simulate performance. It will compute pollutant
loadings (and by extension can help judge removal needs), but it will not itself design or optimize
engineering solutions to meet load reduction targets. In other words, the tool does not internally
model the performance of specific BMPs or calculate required BMP sizes to meet targets (functions
offered by comprehensive tools like BMPTrains); any BMP effectiveness analysis must be carried out
by the user outside of this application. Users will use the load results to inform their own design
processes externally.
Web or Network Features: This is not a web application. There is no multi-user collaboration
component, no cloud storage or online database connectivity. All data resides locally and all
computations happen on the user’s machine. Real-time sharing, remote access, or web-based
updates are not included. (Software updates, if any, would be delivered by distributing a new
application version, not via an auto-update mechanism.)
Mobile Platforms: The initial product is a desktop application and will not have a mobile
(smartphone/tablet) version. The interface is optimized for a desktop/laptop environment. Users on
mobile devices would need to use a desktop or laptop to run the application.
Extensive Word-Processor Functions: While the UI will mimic MS Word in look-and-feel for the
report preview, it is not intended to be a general-purpose word processor. Editing capabilities are
limited to the structured input fields provided – users won’t be freely typing lengthy narrative text
into the report through the app (aside from perhaps a small notes field). The focus is on structured
calculation output rather than arbitrary document editing.
User Interface and Experience
Layout: The screen is divided into two main regions. The upper region contains a form-like input
panel where users enter all required parameters. The lower region displays a continuously updating
preview of the output document (like a PDF or Word layout view). The user can adjust the vertical
split between these panes as needed. The window will have a clean, professional aesthetic (neutral
colors, clear labels, structured formatting) aligned with engineering software conventions.
Input Fields: In the top pane, clearly labeled fields are provided for each input parameter. These
include: 
Site Characteristics: e.g., drainage area (acres or hectares), land use category, percent impervious
area, soil group, meteorological zone/region, etc. 
Hydrologic Inputs: e.g., annual rainfall depth (or selection of a Florida zone to auto-fill), runoff
coefficient or curve number (or selection of soil group to auto-fill values). 
Water Quality Inputs: e.g., Event Mean Concentrations for TN and TP (in mg/L) for the land use or
scenario. Alternatively, the user can select a predefined land use and have the tool fill in the typical
EMCs from the Harper/BMPTrains data. 
Optional Outputs: any other parameters needed for computation (e.g., a retention depth if the
scenario involves treatment – primarily the tool computes load, not removal).
Each field is accompanied by units to eliminate ambiguity. Many fields start with default values
drawn from the Harper report. For instance, if “Single-family Residential” is chosen as the land use,
the TN and TP concentration fields might automatically populate with the average EMC values (2.07
mg/L TN, 0.327 mg/L TP) observed for that category . Users can override any pre-filled number –
all fields are editable to accommodate site-specific data or updated assumptions.
Live Calculation & Validation: As inputs are entered or changed, the application performs
validation and recalculation instantly. If an input is outside expected realistic bounds (e.g., a typo
resulting in an extremely large number), the field could be highlighted or an error message
displayed to prompt correction – however, the tool remains lenient to allow “what-if” explorations.
The real-time calculation engine ensures that by the time the user finishes entering data, the results
are already computed and shown below. There is no separate “Run” button needed for calculation,
enhancing the interactive experience.
Results Preview (Output Pane): The bottom pane presents the formatted results dynamically,
styled like a technical report or worksheet. It typically includes: 
Title/Heading: e.g., “Nutrient Loading Calculation Summary” (which might include a project/site name
if provided). 
Input Summary Table: A neatly formatted table of key input parameters and their values (with units),
documenting the scenario. For example, it would list area, rainfall depth, runoff volume or
coefficient, TN EMC, TP EMC, etc., so a reviewer can see the assumptions. 
Calculated Outputs: The core results – the estimated annual TN load and TP load. These are given in
numeric form (e.g., “Total Nitrogen Load = X kg/yr”), and could be accompanied by a simple graphic
if appropriate (though not required). Each result is accompanied by the formula used to derive it. For
example, the output might show: “Total Nitrogen Load = (TN EMC) × (Annual Runoff Volume) = 2.07
mg/L × 10.5 ac-ft = 26.8 kg/yr”. Alongside such a formula, a citation reference to Harper 2007 is
provided to indicate the source of the formula or value. If the formula involves multiple steps (e.g.,
computing runoff volume from rainfall and area), intermediate values or references can also be
shown for clarity. The goal is that an engineer reading the printout can follow exactly how the
numbers were obtained, confident it aligns with published research . 
Comparison/Conclusion: If the user provides both a pre-development and a post-development
scenario for comparison (to evaluate a “no net increase” condition), the output will include a brief
comparison. For example: “Pre-development N load: 5.0 kg/yr, Post-development N load: 4.8 kg/yr –
No net increase achieved.” This appears only if the user explicitly inputs both scenarios or toggles a
comparison mode; otherwise, the report focuses on a single scenario. 
Footnotes/References: A section at the bottom of the preview (or end of the PDF) lists the full citations
corresponding to any in-text references. The primary reference will be the Harper et al. (2007) FDEP
Stormwater Treatment Report, which provides the scientific basis for these calculations, and the
BMPTrains User Manual where applicable. Each formula or key assumption in the output references
these sources (with section or table numbers as appropriate) to maintain professional
documentation standards.
The preview uses a clear, professional font and layout suitable for printing. Important numeric
results may be bolded for emphasis. Overall, the output is formatted to resemble a polished one-page
technical report or calculation sheet.
Controls and Navigation: Common actions are accessible via a top menu or toolbar. For example: 
File: New Calculation (reset to defaults), Open/Save (if saving input scenarios is supported), and
Export to PDF. 
Edit: Standard edit options may be minimal since inputs are form-driven (perhaps copy/paste
support in fields). 
View: Options to toggle visibility of certain preview sections, zoom controls for the preview, etc. 
Help: Access to help documentation or an About dialog (explaining formulas used, version info, etc.).
The application will have an “Export to PDF” button prominently, since generating the PDF is a key
function. When clicked, it prompts for a file location and then produces a PDF identical to what is
shown in the preview pane (WYSIWYG).
Responsiveness: The UI is designed to resize gracefully. If the window is enlarged, both input and
preview sections expand to utilize the space (potentially showing the entire report on larger screens).
On smaller screens, scrollbars appear for the preview if content exceeds the pane, and the input
section may also scroll. The design ensures usability without excessive scrolling on typical displays.
The overall user experience is intended to be interactive, transparent, and efficient. By combining familiar
document-style visualization with domain-specific calculation features, the tool allows users to focus on
engineering decisions (e.g. tweaking design parameters) rather than on manual number-crunching. The
inclusion of contextual formulas and citations in the UI turns the application into both a calculator and a
learning tool, reinforcing understanding of how each value is derived from established research.
Functional Requirements
The system shall fulfill the following functional requirements to meet the user needs and objectives:
Input Parameters Interface: Provide a dedicated input section for all necessary parameters, each
clearly labeled with units. Users can input values including (but not limited to): site area, rainfall
depth (or region selection), runoff coefficient/curve number, and pollutant concentrations (TN and TP
EMCs). Where applicable, drop-down menus or selection lists are provided (for example, to choose a
land use category or meteorological zone), which will auto-fill related fields with default values from
the Harper/BMPTrains data. All default values are editable, allowing the user to override them at any
time.
Harper Default Values: The calculator shall start up pre-populated with baseline inputs drawn from
the 2007 Harper Stormwater Treatment Report. On launch, the fields contain a coherent set of
default inputs reflecting a typical scenario (e.g., a 1-acre residential catchment with average annual
rainfall and mean N, P concentrations). These defaults are taken from Harper’s data (mean EMCs of
~2.07 mg/L TN and ~0.327 mg/L TP for urban runoff , and a representative runoff depth based on
Florida rainfall). Using these defaults, the application will immediately display a sample nutrient load
calculation in the preview. Users are free to change any of these values, but having realistic defaults
ensures a novice user sees meaningful results right away.
Multiple Land Use/Catchment Support: The application shall support scenarios with multiple
distinct land use areas (sub-catchments) within the project site. The user will be able to enter inputs
for each sub-area (with its own area, land use type/EMCs, runoff parameters, etc.). The calculator will
then aggregate these sub-areas by computing an area-weighted composite runoff volume and a
flow-weighted composite EMC for the site, and use these to calculate total loads. This functionality
mirrors the multi-catchment analysis capability of BMPTrains and ensures accurate load
estimation for mixed-land-use sites.
Real-Time Calculations: The application shall automatically recalculate results and update the
output preview immediately after any input change. The software employs a background calculation
engine that listens for changes to inputs and recomputes the outputs on the fly, without requiring
the user to press a “Calculate” button. This must be done efficiently so that even as the user types,
the preview updates within a fraction of a second (well under 1 second for a full set of inputs). This
real-time feedback loop is critical for interactive exploration of scenarios.
Calculation Methodology: The tool shall compute the annual mass load of each nutrient (TN, TP)
using the formula and approach given by Harper (2007). Specifically, Annual Load = EMC × Annual
Runoff Volume, with proper unit conversions to yield mass (typically in kilograms). This is the
fundamental equation described by Harper . The EMC (event mean concentration, in mg/L) is a
flow-weighted average pollutant concentration, and the Annual Runoff Volume corresponds to the
total runoff from the site in a year (in consistent volume units, e.g., acre-feet or cubic meters). The
software will internally ensure unit consistency (for example, if using mg/L and acre-feet, it will apply
the correct conversion factor to produce mass in kg). If the user provides inputs in alternative units
(e.g., area in hectares, rainfall in mm), the tool will internally convert them to the needed units (or
restrict inputs to a fixed unit system and guide the user accordingly). The resulting load for each
nutrient will typically be presented in kilograms per year (with an option to also show pounds per
year for convenience, if needed).
Runoff Volume Determination: The application shall determine the annual runoff volume based on
user inputs. This could be direct (the user enters a known annual runoff volume or runoff depth) or
derived (the user enters rainfall and site characteristics, and the tool computes runoff). If derived,
the tool will use methods from Harper’s report – for instance, multiplying annual rainfall by a runoff
coefficient or using tabulated runoff depths for given soil groups and regions. For example, if a user
selects a meteorological zone and soil type, the software can look up the corresponding annual
runoff coefficient or depth from the embedded data (per Harper’s appendix tables). This
functionality ensures the runoff volume in the load formula is obtained through the same
methodology Harper used, maintaining consistency with the source material. The user will also have
the option to manually input a custom runoff depth or volume if they have one (overriding the auto-
calculated value). All assumptions (e.g., “using 55 inches annual rainfall for Zone 2”) will be reflected
in the output summary for clarity.
Output – Nutrient Load Results: For each scenario, the application shall output the total annual
total nitrogen load and total annual total phosphorus load. Results should be given in numeric terms
(e.g., X kg/yr by default). If the site area is not exactly one acre, the tool will scale the results
appropriately (Harper’s data often uses per-acre values, but the calculator will handle arbitrary area
inputs). The outputs will be prominently displayed and clearly labeled (e.g., “Total Nitrogen Load (kg/
yr)” and “Total Phosphorus Load (kg/yr)”). If the design scenario involves comparing pre- vs post-development
loads, the outputs shall include both and may indicate the difference or percentage
reduction. However, the comparison is only made if the user provides the data for both scenarios;
otherwise, a single scenario result is shown.
Display of Formulas: The application shall display the formulae and key calculation steps used to
arrive at the nutrient load results in the output preview, next to or underneath the numeric results.
This means if the tool calculated TN load by multiplying a concentration by a volume, the preview
might show an expression like “Load_N = 2.07 mg/L × 123,348 m³/yr = 256 kg/yr” (with the actual
values from the inputs). Each such formula in the output will use the actual numbers provided by the
user, so the reader can verify the computation. The formulas may be formatted either as inline text
or as separate indented equations for readability. This requirement ensures the end user sees not
just the final answers but how they were computed, enhancing trust and transparency.
Citation of Sources: Wherever a formula, coefficient, or default value is used in the output, the
software shall cite the source (primarily the Harper report, and the BMPTrains manual if applicable)
in the output document. For example, after a formula or a stated assumption, a reference like
“(Harper et al., 2007, Table 4-4)” or a numbered citation will be included. The preview and PDF will
include a References section or footnotes that correspond to these citations, providing the full
reference to the Harper 2007 report (and the BMPTrains 2021 manual). By doing this, any reviewer of
the report can trace every key number back to an authoritative source. This is a critical feature for
professional acceptability, since calculations for regulatory purposes must often be justified with
literature or official documentation.
Report Formatting & Narrative: The content of the generated report (preview/PDF) shall be concise
and primarily data-driven. Aside from automatically generated text (like headings, labels, and
perhaps a one-line conclusion), there will not be long paragraphs of narrative. Narrative elements
will be limited to short descriptive phrases or notes (e.g. “Using average EMC values for Single-family
Residential land use.” or “Result: Post-development load does not exceed pre-development load.”).
This requirement aligns with producing a minimal-narrative output, focusing on the calculation
results and necessary context. The formatting will use tables and bullet points as needed to make
the information easy to scan. The end result should look like a polished engineering exhibit or
calculation sheet, rather than a verbose report chapter.
PDF Export Function: The application shall provide the ability to export the current preview of
results to a PDF file. The PDF output must exactly match what is shown in the on-screen preview in
terms of content and layout (WYSIWYG). This includes all tables, formulas, and citations. The export
function should produce a standard PDF that can be opened on any device with a PDF reader, and it
should preserve vector graphics and selectable text (i.e., not just a screenshot image) for clarity
when printing. The user will access this feature via an “Export to PDF” or “Save as PDF” option. Upon
activation, the user is prompted to choose a save location, and the tool generates the file without
need for internet connectivity or external services. The PDF generation should handle typical page
sizes (likely defaulting to Letter or A4) with proper margins. If the report content spans more than
one page, the tool will handle pagination appropriately (including repeating headers or footers if
necessary). This requirement ensures users can easily save and share the calculation results in a
portable format.
Data Persistence (Save/Open): Optional. If the user needs to reuse or tweak scenarios later, the
application may allow saving a session or input set to a file (e.g., using a simple JSON or XML format).
This is a secondary “nice-to-have” feature to facilitate reopening and editing past calculations. Even
without it in the initial release, the ability to quickly redo a calculation by editing inputs is ensured by
the interactive UI; a save feature would simply avoid re-typing inputs for recurring projects. If
implemented, loading a saved scenario file will re-populate all the input fields to their saved values,
instantly updating the results.
Help and Guidance: The application shall include basic help content for the user. This could be via a
“Help” menu linking to a PDF manual or an “About” dialog summarizing the tool’s purpose and
version. The help should explain what each input field represents (including units and typical sources
of that data), and outline the formulas being used (essentially a short recap of the theory: that it’s
based on Harper 2007, using EMC × runoff volume). This ensures that new users or those less
familiar with the Harper report can still use the tool effectively and understand the outputs.
By fulfilling these functional requirements, the application will meet its intended purpose: delivering an
accurate, user-friendly, and transparent nutrient loading calculator for stormwater based on the
authoritative 2007 Harper study. Each requirement above will be verified through testing (for example,
cross-checking the tool’s outputs against example calculations from the Harper report and the BMPTrains
software to ensure correctness).
Non-Functional Requirements
In addition to core functionality, the system must satisfy several non-functional requirements to ensure it is
robust, usable, and maintainable:
Accuracy and Precision: The calculator’s numerical computations must be precise and free of
significant error. Results should match the Harper report’s reference calculations within a reasonable
tolerance (differences only arising from minor rounding). For instance, if the tool computes a load of
25.5 kg/yr and Harper’s example result is 25.4 kg/yr, this <1% difference is acceptable; large
deviations are not. All unit conversions (e.g., converting a runoff volume to a pollutant mass) must
be handled correctly to avoid any unit inconsistency errors. The use of double-precision floating
point (or equivalent) is expected to maintain calculation precision. Moreover, the tool’s outputs
should align with those from the BMPTrains software for identical input scenarios, since both are
based on the same underlying formulas.
Performance: The application should feel instantaneous in its responses. Inputting data or
changing a value should update the results with negligible delay (ideally under 100 milliseconds for
recalculation, given the simplicity of the formulas). UI interactions (opening menus, scrolling the
preview, exporting the PDF) should also be snappy. Even on a typical office laptop running offline,
the tool should consume minimal CPU and memory, ensuring it does not lag or freeze during normal
use. The PDF generation process should complete within a couple of seconds at most for a single-page
report.
Reliability and Stability: The software must be stable during operation. It should handle common
user mistakes gracefully (e.g., if a non-numeric character is accidentally entered in a numeric field,
the tool can either prevent it or show a clear error message without crashing). The application
should not leak memory or degrade in performance over time during a session. If an error does
occur (e.g., an internal calculation issue), the application should catch it and alert the user rather
than simply closing or producing wrong output silently. Given that it will be used offline in potentially
critical decision-making, a high reliability standard is essential.
Usability and UX: The interface design will follow best practices for usability. This includes intuitive
layout of controls, consistent styling, and clear language. Field labels and any messages will be
phrased in engineering-friendly terms (e.g., use “Total Nitrogen (TN) EMC” instead of a cryptic
variable name). The learning curve to use the tool should be very shallow – an engineer should be
able to open it and perform a basic calculation correctly on the first try using the defaults and their
knowledge of the domain. Tooltips or help pop-ups can be provided on input fields to explain them
(for example, hovering over “DCIA %” could show “Directly Connected Impervious Area – used in
runoff calculation”). Visual cues like units, example values, or valid ranges will help prevent misuse.
Overall, the application must present a professional look-and-feel, appropriate for technical users
who expect clarity and precision.
Compatibility and Platform: The program is intended to be a desktop application. It should run on
modern Windows operating systems (Windows 10 and above) as the primary target environment. If
feasible, cross-platform support (ability to run on macOS and Linux) is highly desirable, since some
environmental engineering firms use those platforms as well. The development approach will be
chosen to support cross-platform compilation and deployment if possible (for example, using a C++
Qt framework or a portable GUI toolkit). At minimum, a Windows executable will be delivered. The
program will not require any special hardware – it should run on a standard office computer.
Installation should be straightforward (via an installer or a packaged executable) and not require
complex dependencies. All required libraries (for the GUI, PDF generation, etc.) will be packaged with
the application or statically linked to avoid the user having to install additional components.
Security: Since the application runs offline and deals with non-confidential engineering data,
security considerations are minimal compared to internet applications. However, the software should
not read or write files except when explicitly directed by the user (e.g., exporting a PDF or saving a
scenario file). There is no telemetry or network communication by design, which eliminates many
security concerns (no data leaves the user’s machine). The application should be code-signed or
distributed in a way that users can trust it hasn’t been tampered with (for example, providing
checksums or using a code-signing certificate for the installer) – this ensures that in an offline
transfer (e.g., via USB drive), the user can verify authenticity.
Maintainability and Extensibility: The tool will be developed using modern programming practices
to ensure the codebase is maintainable. While this is more of an internal concern than a user-facing
one, it affects long-term viability. The design will separate concerns (UI vs calculation logic, etc.) so
that future updates (for example, adding a new pollutant or updating a coefficient per new research)
can be done with minimal risk of breaking other features. Using widely adopted frameworks for the
GUI and PDF generation will make it easier for multiple developers to contribute. Additionally,
comprehensive comments or documentation within the code and a clear user manual are expected,
given the professional context of the software.
Offline Data Storage: Any reference data from the Harper report (tables of coefficients, default
values, etc.) that the application uses will be stored locally within the application (embedded in code
or in a bundled data file). The integrity of these data is important – they should exactly match the
Harper report’s published values (and any vetted updates). There will also be clear documentation
pointing to the Harper report (and BMPTrains manual) as the source of the embedded data, so users
know where the numbers come from. If any data updates are needed (say a corrected value from
new research), the maintainers can update the embedded dataset in a new release. The requirement
is that no data lookup calls are made to external databases or services; everything needed is
packaged with the installer.
Logging and Debugging: For development and QA purposes, the application may include a local
logging mechanism to record events like calculation actions, errors, or file export operations. In
normal operation, this is invisible to the user, but if a user encounters an issue, the log can be
consulted by the development team. This contributes to maintainability and support, though it’s not a
user requirement per se. Any such logs will reside locally and not contain sensitive info (mostly just
technical details for debugging computational issues if they arise).
Regulatory Acceptance: While not a strict software requirement, it is expected that by basing the
tool exactly on the Harper methodology and showing all work with citations, the output will be
acceptable for inclusion in regulatory submittals (e.g., stormwater permit applications in Florida).
The output format and content should align with what regulators expect to see in a calculation
report. By meeting all the above requirements for accuracy and transparency, the tool will implicitly
satisfy this need. Moreover, since it employs the same methodology as the BMPTrains model (a tool
already recognized by regulatory agencies), its results should carry similar credibility . The
application will reference the full title and date of the Harper report in the output and
documentation, so any reviewer can identify the source of the methodology.
In summary, these non-functional requirements ensure that the nutrient loading calculator is not only
functionally correct but also performant, user-friendly, and robust in a professional setting. Meeting them
will result in a reliable tool that engineers trust and prefer to use over ad-hoc spreadsheets or manual
calculations.
Technical Considerations
While this document focuses on requirements and not implementation, it’s important to note some
technical guidelines that will influence design and development (to ensure the product meets the above
requirements):
Development Platform: Visual Studio Code and CLion IDEs for development,
indicating that languages like C++ (with Qt for GUI, for example) or Python (with appropriate
libraries) could be used. The choice will depend on balancing rapid UI development with
performance and cross-platform capability. A likely approach is using a C++ framework (e.g. Qt) for a
native GUI and a PDF generation library, which CLion supports well. VS Code will be used in parallel
for code editing and project management. The development environment should be set up such that
the application can be built and tested on multiple platforms if cross-platform support is targeted.
PDF Generation: A suitable library or toolkit (such as Qt’s QTextDocument for printing to PDF, or a
PDF generation library like PDFium, or ReportLab if Python is used) will be chosen early in
development to fulfill the PDF export requirement. The library must support embedding formulas,
images (if any in future), and custom formatting. The choice will be integrated with the GUI
framework to ensure the preview and the PDF output share the same rendering logic (to guarantee
WYSIWYG consistency).
Data Handling: The Harper report data (tables of values, empirical relationships) will be encoded in
the application as constants or lookup tables. The team will double-check these against the source
documents (Harper 2007, and BMPTrains 2021 updates) to ensure fidelity. For example, tables like
Harper’s Table 4-4 (mean EMCs for land uses) and related datasets will be transcribed. The
development team might include a small verification routine or unit tests that compare the
application’s calculations to known values from the report to ensure the embedded data and
formulas are correct.
Testing Strategy: A comprehensive testing plan will be in place. This includes unit tests for the
calculation logic (feeding known inputs and checking against expected outputs from sample
problems), integration tests for the UI (ensuring changes propagate to output), and user acceptance
Documentation: The final deliverable will include a user guide (explaining how to use the software
and the underlying assumptions/formulas) and developer documentation (for future maintainers).
Given the PRD itself serves as a reference for what the tool does and why, parts of this document can
be adapted into the user manual, especially the background on formulas and the meaning of inputs/
outputs.
