Harper Report-Based Nutrient Loading Calculator – Process Requirements Document
Project Overview
This document outlines the requirements for a standalone desktop application that computes stormwater nutrient loadings (nitrogen and phosphorus) using formulas and data from the 2007 Harper Stormwater Treatment Report. The Harper report’s analyses focus on nitrogen and phosphorus mass loadings as these nutrients are the primary contributors to water quality impairment in Florida  . One key objective of the report is to ensure no net increase in pollutant loadings after development compared to pre- development conditions . The proposed software will enable engineers and planners to easily calculate annual nitrogen (TN) and phosphorus (TP) loads for a given site using Harper’s exact formulas, providing transparency through displayed calculations and citations. The tool is intended for use entirely offline on a single user’s machine, with a user-friendly interface that mimics a word processor (Microsoft Word style) for entering input data and viewing formatted results.
Target Users: The primary users are civil and environmental engineers, stormwater planners, and regulatory reviewers who need to quickly estimate nutrient loadings for project sites and verify compliance with criteria (e.g. 80%/95% removal targets or no net increase in loadings). The application will also be useful for educational purposes, allowing users to see how changes in inputs (land use, runoff, etc.) affect nitrogen/phosphorus loads in real time.
Goals and Objectives

Accurate Nutrient Load Calculations: Implement the exact formulas from the Harper (2007) report to compute annual total nitrogen (TN) and total phosphorus (TP) mass loadings for stormwater runoff with a high degree of accuracy. The calculator’s results must be consistent with the Harper report’s data and examples, ensuring engineering credibility.
User-Friendly Interface: Provide a familiar, intuitive user interface resembling a word processor document. The top section will contain input fields (for site parameters and pollutant parameters), and a live PDF-style preview of results will be shown below. Users should feel comfortable with the interface without steep learning curves, leveraging common UI paradigms (menus, forms, and document-style output).
Pre-Populated Defaults: Prefill all input fields with default values derived from the Harper report’s typical data so that a user can immediately see a sample calculation. For example, default event mean concentrations (EMCs) might use representative values such as ~2.07 mg/L for TN and
~0.327 mg/L for TP, reflecting average stormwater nutrient concentrations from Harper’s findings. These defaults save time and ensure calculations start from realistic baselines, though every default can be overridden by the user.
Real-Time Calculation & Feedback: Perform all computations instantaneously as inputs are entered or modified. The preview of results updates in real time with no extra “calculate” step, allowing users

to iteratively tweak inputs and immediately see the impact on nutrient load outputs. This dynamic feedback is crucial for exploratory analysis and verification of design scenarios.
Transparency (Formulas & Citations): Display the formulas used and cite their source within the results output. The generated report should show how each key result was calculated (e.g. showing that annual load = concentration × runoff volume) with proper reference to the Harper report section or table from which the formula or value was obtained. This transparency builds trust in the results and provides an educational traceability to the established research.
PDF Reporting (Minimal Narrative): Enable users to export the results to a well-formatted PDF document. The report will be concise and technical – optimized for engineering use with minimal narrative text. It will focus on input parameters, calculated nutrient loads, relevant formulas, and references, rather than lengthy explanations. The style should resemble an engineering calculation sheet or technical memo, so that the output can be directly used in reports or permitting documentation with little to no editing.
Offline, Standalone Operation: The application must run entirely offline as a desktop program. All necessary data (default coefficients, formulas, etc.) will be embedded so that no internet connection is required for any functionality. Users (often working in the field or in secure environments) can rely on the tool on their local machine. The program will be self-contained and easily installable on a single user’s computer, without requiring server components or cloud services.
Scope of the Product
In Scope

Nutrient Loading Calculations: The tool will calculate annual mass loadings of total nitrogen and total phosphorus from stormwater runoff using the empirical formulas, coefficients, and methodologies documented in the Harper 2007 report. Calculations will be based on event mean concentration (EMC) values and runoff volume relationships as described by Harper-Report.pdf . Both pre- development and post-development scenarios can be evaluated by adjusting input parameters (e.g. land use, runoff characteristics) – allowing the user to determine if a “no net increase” condition is achieved.
Default Data from Harper Report: Key input parameters (such as typical runoff depth, nutrient concentrations for various land uses, etc.) will be sourced from the Harper report’s data sets. The application will include these as starting defaults or selection options. For example, the mean nutrient concentrations for common land use categories (residential, commercial, etc.) provided by Harper-Report.pdf will be available for quick selection. Meteorological zone data and runoff coefficients from the report will likewise be incorporated for default runoff volume estimation.
User Input Flexibility: Users will be able to modify any input values to fit their specific project conditions. This includes site-specific variables such as drainage area, impervious cover, rainfall depth or region, runoff coefficients, and measured or assumed EMCs for TN and TP. The tool will not be limited to preset scenarios – any reasonable numeric input can be entered, and the calculations will adjust accordingly. This flexibility ensures the calculator can handle a wide range of real-world scenarios beyond the default cases.
Interactive UI with Live Preview: The application will feature a split-pane interface – inputs on the top pane and a live-updating preview of the output report on the bottom pane. As the user enters or changes values in the input fields, the bottom pane will immediately render the updated results in a formatted, printable view. The preview will show calculated nutrient loadings, intermediate values as

needed, and the formulas used (with notations or footnotes citing Harper). This interactive feedback loop is central to the user experience.
PDF Export of Results: Users can generate a PDF file of the results exactly as shown in the preview. The PDF will mirror the on-screen output (WYSIWYG – “what you see is what you get”), including all tables, formulas, and citations. This allows the results to be easily saved, printed, or inserted into official reports. The export function will require no online services and will produce a professional- looking document suitable for regulatory review or archival.
Out of Scope

Other Pollutant Calculations: The focus is strictly on total nitrogen and total phosphorus load calculations. Other stormwater constituents (e.g. TSS, BOD, heavy metals) are outside the scope of this tool’s calculations. The Harper report notes that controlling nutrients tends to control other pollutants as well, so by concentrating on N and P, the most critical factors are covered. Future expansions could consider additional pollutants, but the initial version will not.
Advanced Treatment Design: The application will not perform detailed design of stormwater treatment systems (e.g. sizing a retention pond) or simulate performance. It will compute pollutant loadings (and by extension can help judge removal needs), but it will not itself design or optimize engineering solutions to meet load reduction targets. Users will use the load results to inform their own design processes externally.
Web or Network Features: This is not a web application. There is no multi-user collaboration component, no cloud storage or online database connectivity. All data resides locally and all computations happen on the user’s machine. Real-time sharing, remote access, or web-based updates are not included. (Software updates, if any, would be delivered by distributing a new application version, not via an auto-update mechanism.)
Mobile Platforms: The initial product is a desktop application and will not have a mobile (smartphone/tablet) version. The interface is optimized for a desktop/laptop environment. Users on mobile devices would need to use a desktop or laptop to run the application.
Extensive Word-Processor Functions: While the UI will mimic MS Word in look-and-feel for the report preview, it is not intended to be a general-purpose word processor. Editing capabilities are limited to the structured input fields provided – users won’t be freely typing narrative text into the report through the app (aside from perhaps a notes field). The focus is on structured calculation output rather than arbitrary document editing.
User Interface and Experience
The application’s interface is designed to be immediately familiar by adopting a layout similar to common document editing software:
Layout: The screen is divided into two main regions. The upper region contains a form-like input panel where users enter all required parameters. The lower region displays a continuously updating preview of the output document (like a PDF or Word print layout view). The user can adjust the vertical split between these panes as needed, allowing focus on inputs or results. The overall window will have a clean, professional aesthetic aligned with engineering software (e.g. a neutral color scheme, clear labels, and structured output formatting).

Input Fields: In the top pane, clearly labeled fields are provided for each input parameter. These may include:
Site Characteristics: e.g. drainage area (acres or hectares), land use category, percent impervious area, soil group, meteorological zone/region, etc.
Hydrologic Inputs: e.g. annual rainfall depth (or selection of a Florida zone to auto-fill this), runoff coefficient or curve number (or selection of soil group to auto-fill typical values).
Water Quality Inputs: e.g. Event Mean Concentration for TN and TP (in mg/L) for the land use or scenario, or alternatively the user could select a predefined land use and have the tool fill in the typical EMCs from the Harper data.
Optional Outputs: any other parameters that might be needed for computation (e.g. retention depth if scenario involves treatment – though primarily the tool computes load, not removal).
Each field is accompanied by units (e.g. “Drainage Area (acres)”, “TN Concentration (mg/L)”) to eliminate ambiguity. Many fields are initialized with default values drawn from the Harper report. For instance, if “Single-family Residential” is chosen as the land use, the TN and TP concentration fields might automatically populate with the average EMC values (2.07 mg/L TN, 0.327 mg/L TP) observed for that category  . Users can override any pre-filled number – all fields are editable to accommodate site-specific data or updated assumptions.
Live Calculation & Validation: As inputs are entered or changed, the application performs validation and calculation instantly. If an input is outside expected realistic bounds (e.g., a typo resulting in an extremely large number), the field could be highlighted or an error message displayed to prompt correction – however, the tool will be lenient to allow “what-if” explorations (it will calculate results as long as inputs are numerically valid, even if unusual). The real-time calculation engine ensures that by the time the user finishes entering data, the results are already computed and shown below. There is no separate “Run” button needed for calculation, enhancing the interactive experience.
Results Preview (Output Pane): The bottom pane presents the formatted results dynamically. It is styled like a report or worksheet, with the following content structure:
Title/Heading: e.g. “Nutrient Loading Calculation Summary” (which might include the project/site name if provided by the user).
Input Summary Table: A neatly formatted table or list of the key input parameters and their values (including units). This acts as documentation of the scenario. For example, it would list area, rainfall depth, runoff volume or coefficient, TN EMC, TP EMC, etc., so that someone reading the report can see the assumptions.
Calculated Outputs: The core results, likely the estimated annual TN load and TP load. These could be presented in both numerical form (e.g., “Total Nitrogen Load = X kg/yr”) and possibly graphical form if appropriate (though not a primary requirement). Each result will be accompanied by the formula used to derive it. For example:
“Total Nitrogen Load = (TN EMC) × (Annual Runoff Volume) = 2.07 mg/L × 10.5 acre-ft = 26.8 kg/yr”.
Alongside or immediately below such a formula, a citation reference to Harper 2007 is provided (as shown in this example) to indicate the source of the formula or value. If the formula involves

multiple steps (e.g., computing runoff volume from rainfall and area), the intermediate formula or reference can also be shown for clarity. The goal is that an engineer reading the printout can follow exactly how the numbers were obtained, with confidence that it aligns with published research  .
Comparison/Conclusion (if applicable): If the user provided both a pre-development and a post- development scenario for comparison (for instance, to evaluate no net increase), the output might include a brief comparison statement. For example: “Pre-development N load: 5.0 kg/yr, Post- development N load: 4.8 kg/yr – No net increase achieved.” However, such comparisons would only appear if the user explicitly inputs both scenarios or toggles such an analysis; otherwise, the report focuses on the single scenario calculation.
Footnotes/References: A section at the bottom of the preview (or end of the PDF) will list full citations corresponding to any in-text references. The primary reference will be the Harper et al., 2007 FDEP Stormwater Treatment Report, which provides the scientific basis for the calculations. Each formula or data-driven assumption in the output references this report (with section or table numbers as appropriate) to maintain professional documentation standards.
The preview content uses a clear, professional font and layout suitable for printing. Important numeric results may be bolded for emphasis. Overall, the preview is formatted to look like a polished one-page technical report or calculation sheet.
Controls and Navigation: Common actions are accessible via a top menu or toolbar, including:
File Operations: “New Calculation” (reset to default inputs), “Open”/“Save” (if the tool allows saving a scenario input file), and “Export to PDF”.
Edit: Options might be minimal since inputs are direct (possibly copy/paste support in fields).
View: Toggles for showing/hiding certain sections of the preview, zoom control for the preview, etc.
Help: Access to a help document or about dialog, which would outline the formulas used and version information.
The application will have an “Export to PDF” button prominently, since generating the PDF is a key function. When clicked, it will prompt for a file location and then produce a PDF identical to what is shown in the preview pane.
Responsiveness: The UI will be designed to resize gracefully. If the window is enlarged, both input and preview sections expand accordingly. The preview especially should take advantage of larger screens to display as much of the formatted output as possible (potentially showing the whole report on one screen for review). On smaller laptop screens, scrollbars will appear for the preview if content exceeds the pane, and the input section may become scrollable if needed. The design will ensure usability without excessive scrolling in typical use.
The overall user experience is aimed to be interactive, transparent, and efficient. By combining familiar document-style visualization with domain-specific calculation features, the tool will let users focus on engineering decisions (e.g. tweaking design parameters) rather than on manual number-crunching. The inclusion of contextual formulas and citations in the UI turns the application into both a calculator and a learning tool, reinforcing understanding of how each value is derived from the established research.

Functional Requirements
Below are the specific functional requirements of the nutrient loading calculator application. These define what the system shall do to meet the user needs and objectives:
Input Parameters Interface: The application shall provide a dedicated input section for all necessary parameters, with each input clearly labeled and accompanied by units. Users can input values including, but not limited to: site area, rainfall depth (or region selection), runoff coefficient/ curve number, and pollutant concentrations (TN and TP EMCs). Where applicable, drop-down menus or selection lists shall be provided (for example, to choose a land use category or meteorological zone), which will auto-fill related fields with default values from the Harper report. All input fields shall be editable so that the user can override defaults at any time.
Harper Default Values: The calculator shall be pre-populated with default values taken from the 2007 Harper Stormwater Treatment Report for a baseline scenario. This means on startup, the fields contain a coherent set of inputs reflecting a typical case (e.g., a 1-acre residential catchment with average annual rainfall and mean N, P concentrations). These defaults are drawn from Harper’s data (for instance, mean EMCs of 2.07 mg/L TN and 0.327 mg/L TP for urban runoff  and a representative runoff volume based on Florida rainfall). Using these defaults, the application will immediately display a sample nutrient load calculation in the preview. Users are free to change any of these values, but the presence of defaults allows quick use of the tool out-of-the-box and ensures that novice users start with realistic values.
Real-Time Calculations: The application shall automatically recalculate results and update the output preview immediately after any input change. This implies a behind-the-scenes calculation engine that listens for changes to input fields and recomputes the outputs on the fly, without requiring the user to press a “Calculate” button. The system must handle this efficiently so that even as the user types, the preview updates within a fraction of a second for small changes (and certainly under a second for a full set of inputs). This real-time feedback loop is critical for interactive exploration of scenarios.
Calculation Methodology (Nutrient Load Formula): The tool shall compute annual mass load of each nutrient (TN, TP) using the formula and approach given by Harper (2007). Specifically, Annual Load = EMC × Annual Runoff Volume (converted to consistent units) . The EMC (event mean concentration) is a flow-weighted average pollutant concentration (mg/L), and Annual Runoff Volume corresponds to the total stormwater runoff from the site in a year (e.g., in acre-feet or cubic meters). The software will internally ensure unit consistency (for example, if using mg/L and acre-feet, it will apply the proper conversion factor to yield mass in kilograms). If the user provides inputs in alternative units (e.g., area in hectares, rainfall in mm), the tool will internally convert them to the units needed for the formula or will restrict inputs to a fixed unit system and guide the user accordingly. The calculated result for each nutrient will typically be presented in kilograms per year (with an option to also show pounds/year for convenience, if needed).
Runoff Volume Determination: The application shall determine the annual runoff volume based on user inputs. This could be direct (user enters a known runoff volume or depth) or derived (user enters rainfall and site characteristics, and the tool computes runoff). If derived, the tool will use methods from Harper’s report – for instance, multiplying annual rainfall by a runoff coefficient or

using tabulated runoff depths for given soil groups and regions. For example, if a user selects a meteorological zone and soil type, the software can look up the corresponding annual runoff coefficient or depth from the embedded data (as per Harper’s Table 6-6 and related tables). This functionality ensures the runoff volume in the load formula is obtained through the same methodology Harper used, maintaining consistency with the source material. The user will also have the option to manually input a custom runoff volume or depth if they have one (overriding the auto- calculated value). All assumptions (e.g., “using 55 inches annual rainfall for Zone 2”) will be reflected in the output summary for clarity.
Output – Nutrient Load Results: For each scenario, the application shall output the total annual nitrogen load and total annual phosphorus load. Results should be given in numeric terms (e.g., in kg/year by default). If the site area is not exactly one acre, the tool will scale the results appropriately (Harper’s data often uses per-acre values  , but the calculator will handle arbitrary area). The outputs will be prominently displayed in the preview, and labeled clearly (e.g., “Total Nitrogen Load (kg/yr)” and “Total Phosphorus Load (kg/yr)”). If the design scenario involves comparing pre- vs post-development loads, the outputs shall include both and may indicate the difference or percentage reduction. However, the comparison is only made if the user provides the data for both scenarios; otherwise, a single scenario result is shown.
Display of Formulas in Output: The application shall display the formulae and calculation steps used to arrive at the nutrient load results in the output preview, next to or underneath the numeric results. This means if the tool calculated TN load by multiplying a concentration by a volume, the preview might show an expression like “Load_N = 2.07 mg/L × 123,348 m³/yr = 256 kg/yr” (with actual values from the inputs). Each such formula in the output will use the actual numbers provided by the user, so the reader can verify the computation. The formulas may be formatted either as inline text or as separate indented equations for readability. This requirement ensures the end-user sees not just the final answer but how it was computed, enhancing trust and transparency.
Citation of Sources: Wherever a formula, coefficient, or default value is used in the output, the software shall cite the source (primarily the Harper report) in the output document. For example, after a formula or a stated assumption, a reference like “(Harper et al., 2007, Table 4-4)” or a numbered citation will be included. The preview and PDF will include a References section or footnotes that correspond to these citations, providing the full reference to the Harper 2007 report. By doing this, any reviewer of the report can trace every key number back to the authoritative source. This is a critical feature for professional acceptability, since calculations for regulatory purposes must often be justified with literature or official documentation.
Report Formatting & Narrative: The content of the generated report (preview/PDF) shall be concise and primarily data-driven. Aside from automatically generated text (like headings, labels, and perhaps a one-line conclusion), there will not be long paragraphs of narrative. The only narrative elements might be short descriptive phrases (e.g. “Using average EMC values for Single-family Residential land use  .” or “Result: Post-development load does not exceed pre-development load.”). This requirement aligns with producing a minimal narrative output, focusing on the calculation results and necessary context. The formatting will use tables and bullet points as needed to make the information easy to scan. The end result should look like a polished engineering exhibit or appendix item, rather than a verbose report chapter.

PDF Export Function: The application shall provide the ability to export the current preview of results to a PDF file. The PDF output must exactly match what is shown in the on-screen preview in terms of content and layout (WYSIWYG). This includes all tables, formulas, and citations. The export function should produce a standard PDF that can be opened on any device with a PDF reader, and it should preserve vector graphics and text (i.e., not just a screenshot image) for clarity when printing. The user will access this feature via an “Export” or “Save as PDF” option. Upon activation, the user is prompted to choose a save location, and the tool generates the file without need for internet connectivity or external PDF services. The PDF generation should handle typical page sizes (likely default to letter or A4) with proper margins. If the report content is more than one page, the tool will handle pagination appropriately (including repeating headers or footers if necessary). This requirement ensures users can easily save and share the calculation results in a portable format.
Data Persistence (Optional/If Applicable): If the user needs to reuse or tweak scenarios later, the application shall allow saving a session or input set to a file (proprietary format or even a simple JSON/XML). This is a secondary feature (nice-to-have) to facilitate reopening and editing past calculations. The PRD includes this for completeness, but it may be slated for a later version if not in the initial scope. Regardless, the ability to quickly redo a calculation by editing inputs (even without a save feature) is ensured by the real-time UI; a save feature would simply avoid re-typing inputs for recurring projects.
Help and Guidance: The application shall include basic help content for the user. This could be via a “Help” menu linking to a PDF manual or an “About” dialog summarizing the tool’s purpose and version. The help should explain what each input field represents (including units and typical sources of that data), and outline the formulas being used (essentially a short recap of the theory: that it’s based on Harper 2007, using EMC × runoff volume, etc.). This ensures that new users or those less familiar with the Harper report can still use the tool effectively and understand the outputs.
By fulfilling these functional requirements, the application will meet its intended purpose: delivering an accurate, user-friendly, and transparent nutrient loading calculator for stormwater based on the authoritative 2007 Harper study. Each requirement above will be verified through testing (for example, cross-checking the tool’s outputs against example calculations from the Harper report or known regulatory design cases to ensure correctness).
Non-Functional Requirements
In addition to the core functionality, the system must satisfy several non-functional requirements to ensure it is robust, usable, and maintainable. These include performance criteria, compatibility, and other quality attributes:
Accuracy and Precision: The calculator’s numerical computations must be precise and free of significant error. Results should generally match the Harper report’s reference calculations within a reasonable tolerance (differences only arising from rounding to a practical number of significant figures). For instance, if the tool computes a load of 25.5 kg/yr and Harper’s example result is
25.4 kg/yr, this is acceptable; large deviations would not be. All unit conversions (e.g., from volume to mass) must be handled correctly to avoid any unit inconsistency errors. The use of double-precision floating point or equivalent is expected to maintain calculation precision.

Performance (Speed): The application should feel instantaneous in its responses. Inputting data or changing a value should update the results with negligible delay (ideally under 100 milliseconds for recalculation, which is trivial given the simplicity of the formulas). The UI interactions (opening menus, scrolling the preview, exporting PDF) should also be snappy. Even when running on a typical laptop without internet, the tool should consume minimal CPU and memory, ensuring it does not lag or freeze during normal use. The PDF generation process should complete within a couple of seconds at most for a single report page.
Reliability and Stability: The software must be stable during operation. It should handle common user mistakes gracefully (e.g., if a non-numeric character is accidentally entered in a numeric field, the tool can either prevent it or show a clear error message without crashing). The application should not leak memory or degrade over time during a session. If an error does occur (e.g., an internal calculation issue), the application should catch it and alert the user rather than simply closing or producing wrong output silently. Given that it will be used offline in potentially critical decision-making, a high reliability standard is essential.
Usability and UX Quality: The interface design will follow best practices for usability. This includes intuitive layout of controls, consistent styling, and clear language. Field labels and any messages will be phrased in engineering-friendly terms (e.g., use “Total Nitrogen (TN) EMC” instead of a cryptic variable name). The learning curve to use the tool should be very shallow – an engineer should be able to open it and perform a basic calculation correctly on the first try using the defaults and their knowledge of the domain. Tooltips or help icons can be provided on input fields to explain them (for example, hovering over “DCIA %” could show “Directly Connected Impervious Area percentage – used to compute runoff”). Visual cues like units, example values, or ranges will help prevent misuse. Overall, the application must present a professional look-and-feel, appropriate for technical users who expect clarity and precision.
Compatibility and Platform: The program is intended to be a desktop application. It should run on modern Windows operating systems (Windows 10 and above) as the primary target environment. If feasible, cross-platform support (ability to run on macOS and Linux) is highly desirable, since some environmental engineering firms use those platforms as well. The choice of development tools (Visual Studio Code, JetBrains CLion) and programming language will be made to support cross- platform compilation and deployment, if possible. At minimum, a Windows executable will be delivered. The program will not require any special hardware – it should run on a standard office computer. Installation should be straightforward (an installer or a zip package) and not require complex dependencies. All required libraries (for GUI, PDF generation, etc.) will be packaged with the app or statically linked to avoid the user having to install additional components.
Security: Since the application runs offline and deals with non-confidential engineering data, security considerations are minimal compared to internet applications. However, the software should not read or write files except when explicitly directed by the user (e.g., exporting a PDF or saving a scenario file). There is no telemetry or network communication by design, which eliminates many security concerns (no data leaves the user’s machine). The application should be signed or distributed in a way that users can trust it hasn’t been tampered with (for example, providing checksums or using a code-signing certificate for the installer) – this ensures that in an offline transfer (e.g., via USB drive), the user can verify authenticity.

Maintainability and Extensibility: The development of the tool will use modern programming practices to ensure the codebase is maintainable. While this is more of an internal concern than a user-facing one, it affects long-term viability. The requirement here is that the design should separate concerns (UI vs calculation logic, etc.) so that future updates (for example, adding a new pollutant or updating a coefficient per new research) can be done with minimal risk of breaking other features. Using widely used frameworks for the GUI and PDF generation will make it easier for multiple developers to contribute. Additionally, comprehensive comments or documentation within the code and a user manual outside are expected, given the professional context of the software.
Offline Data Storage: Any reference data from the Harper report (tables of coefficients, default values, etc.) that the application uses will be stored locally within the application (embedded in code or in a bundled data file). The integrity of these data is important – they should exactly match the Harper report’s published values. There should also be a clear reference in documentation to the Harper report so users know the source of the embedded data. If any data updates are needed (say a corrected value), the maintainers can update the embedded dataset in a new release. The requirement is that no data lookup calls are made to external databases or services; everything needed is packaged with the installer.
Logging and Debugging: For development and QA purposes, the application may include a logging mechanism (writing to a local log file) to record events like calculation actions, errors, or export operations. In normal operation, this is invisible to the user, but if a user encounters an issue, the log can be consulted by the development team. This contributes to maintainability and support, though it’s not a user requirement per se. Any such logs will reside locally and not contain sensitive info (mostly just for debugging computational issues if they arise).
Regulatory Acceptance: While not a strict software requirement, it is expected that by basing the tool exactly on the Harper report and showing all work with citations, the output will be acceptable for inclusion in regulatory submittals (e.g., stormwater permit applications in Florida). This non- functional aspect means the tool’s output format and content should align with what regulators expect to see in a calculation report. By meeting all the above requirements for accuracy, transparency, and using official data, the tool will implicitly satisfy this need. To support this, the application will reference the full title of the Harper report and date in the references, so any reviewer can identify the source.
In summary, the non-functional requirements ensure that the nutrient loading calculator is not only functionally correct but also performant, user-friendly, and robust in a professional setting. Meeting these will result in a reliable tool that engineers trust and prefer to use over ad-hoc spreadsheets or manual calculations.
Technical Considerations
While this document focuses on requirements and not implementation, it’s important to note some technical guidelines that will influence design and development (to ensure the product meets the above requirements):
Development Platform: The team will utilize Visual Studio Code and CLion IDEs for development, indicating that languages like C++ (with Qt for GUI, for example) or Python (with appropriate

libraries) could be used. The choice will depend on balancing rapid UI development with performance. A likely approach is using a C++ framework for a native GUI and PDF generation library, which CLion supports well. VS Code will be used in parallel for code editing and project management. The development environment should be set up such that the application can be built and tested on multiple platforms if cross-platform support is targeted.
PDF Generation Libraries: A suitable library or toolkit (such as Qt’s QTextDocument for printing to PDF, or a PDF generation library like PDFium, ReportLab if Python, etc.) will be chosen early in development to fulfill the PDF export requirement. The library must support embedding formulas, images (if any in future), and custom formatting. The choice will be integrated with the GUI framework to ensure the preview and the PDF output share the same rendering logic (to guarantee WYSIWYG consistency).
Data Handling: The Harper report data (tables of values, empirical relationships) will be encoded in the application either as constants or lookup tables. Proper care will be taken to double-check these against the source. For example, tables like 4-4 (mean EMCs for land uses) and 6-8 (pre-development loads) will be transcribed. The development team might include a small verification routine or unit tests that compare the application’s calculations to known values from the report to ensure fidelity.
Testing Strategy: A comprehensive testing plan will be in place. This includes unit tests for the calculation logic (feeding known inputs and checking against expected outputs from sample problems), integration tests for the UI (ensuring changes propagate to output), and user acceptance testing with a few sample users (maybe practicing engineers) to get feedback on usability and clarity of output. Because no development has started yet, testing will be built into the development lifecycle from the beginning to catch issues early.
Documentation: The final deliverable will include user documentation (explaining how to use the software and the underlying assumptions/formulas) and developer documentation (for future maintainers). Given the PRD itself serves as a reference for what and why, parts of this document can be adapted into user documentation, especially the background on formulas and the meaning of inputs/outputs.
By keeping these technical considerations in mind, the development can proceed smoothly and ensure the final product aligns tightly with the specified requirements.
Project Plan and Next Steps
No development work has been completed at this stage; the project is currently in the requirements and design phase. Below is the high-level plan for implementation, outlining the major phases and tasks that will be undertaken to deliver the product:
Requirements Finalization & Review: Complete this PRD and have it reviewed/approved by all stakeholders (e.g. project manager, end-user representatives). Resolve any ambiguities in the requirements and ensure alignment on the project scope and objectives before starting development.

User Interface Design (Wireframing/Prototyping): Create mock-ups of the application interface, showing the input form layout and the output preview format. This may involve drawing out the screen with the fields, buttons, and preview document. Iterate on the design with stakeholder feedback to ensure the UI will be intuitive and meet user expectations. (No coding yet, just design.)
Architecture & Technical Design: Plan the software architecture, including the choice of programming language, libraries for GUI and PDF, and data structures for handling inputs and calculations. This phase will produce a technical design document or at least an outline covering how the real-time update mechanism will work, how data from Harper will be stored and accessed, etc. Additionally, set up the development environment (initialize a code repository, project structure in VS Code/CLion, etc.).
Development Phase 1 – Core Calculation Engine: Implement the core logic for nutrient load calculation. This involves coding functions to compute runoff volume (given rainfall, area, etc.) and to calculate TN and TP loads given EMC and volume. Include internal code to load default parameters. This phase can be developed and tested independently of the UI (e.g., via unit tests or a console interface) to verify that the formulas are producing correct results.
Development Phase 2 – User Interface Implementation: Develop the graphical user interface of the application. Set up the main window with input fields and ensure changes in those fields call the calculation engine to get new results. Develop the output preview component – initially, it could be a simple text area that updates with calculation results. Gradually enhance formatting to match the desired report style (tables, equations, etc.). This phase will involve connecting the UI events to the calculation logic (data binding) so that everything stays in sync.
Development Phase 3 – Advanced Features: Implement remaining features such as the citation display (ensuring references appear correctly in the preview), PDF export functionality (integrating the chosen PDF library and testing that output matches the on-screen content), and scenario save/ open if included. Also, implement input validation logic and any help dialogs. By the end of this phase, all functional requirements should be addressed in the application.
Testing & Quality Assurance: Rigorously test the application. This includes:
Unit Testing: Test the calculation functions with known input-output pairs (for example, use data from Harper’s tables or design examples to see if the tool matches the expected loads).
Integration Testing: Test the end-to-end usage: enter typical input sets and verify the preview updates correctly, then export to PDF and verify the PDF content. Test on different machines or OS (if cross-platform) to catch any environment-specific issues.
Usability Testing: Have a few end users (or team members acting as users) run through common tasks to ensure the UI is understandable. Gather feedback on whether the output is clear and helpful.
Performance Testing: Open the app on a modest-spec computer and ensure it remains responsive. Also test with extreme input values to see how the app handles them (e.g., very large area or rainfall). Any bugs or discrepancies discovered will be tracked and fixed before release.

Documentation & User Guide Preparation: Compile the user manual and inline help content. This will be based on the requirements (explaining each input and feature) and any additional insights from development. Ensure the Harper report is properly cited in the documentation as well. This step also includes preparing a “readme” or quick-start guide for the application.
Release Preparation and Deployment: Package the application for distribution. For Windows, this might mean creating an installer (.exe or .msi) that will place the application and any required libraries onto the user’s system. For other platforms, packaging might involve providing a binary or using a package manager. Verify the installation process on a clean system. Also, perform a final run- through of the app as if an end user, to confirm everything is working in the installed version.
Post-Release Support Plan: Although no code has been written yet, it’s prudent to plan for maintenance. Determine how users can report issues or request enhancements (since offline, likely via email or when they reconnect). Set up a system for tracking versions and changes (version control tags, changelog). This step ensures the project’s sustainability after the initial release.
Each of these phases will be approached sequentially, though some overlap is expected (for example, UI design may start while requirements are being finalized, and testing will occur throughout development). Since all items are pending (no tasks have been completed yet), progress will be monitored closely through to completion. The result of this project plan will be a high-quality, professional software product delivered in line with the requirements set forth in this PRD.

Harper Report.pdf
file://file-Vb53oLDr8jGWXgUW4TmPNZ
